/*
¡Bienvenidos a la Semana 3!
Para esta tarea se van a desarrollar ejercicios en Scala, por lo que el objetivo reside 
en implementar las funciones tomando como base el(los) parámetro(s) y retornando exactamente 
lo que se solicita ya que al final se van a llevar a cabo pruebas automatizadas (siguiente tema a ver).
Y se van a comparar tipos de datos y los resultados en sí, entonces el crédito por ejercicio se
obtiene por el número de pruebas que se hubieran aprobado.
Aprovechando la tarea, se trata además de visualizar de manera concreta la implementación de 
funciones en este lenguaje.
En lo que respecta a la entrega, se debe colocar en su directorio de Git un subdirectorio nombrado
"Tarea Semana 3" y dentro debe de estar una copia de este archivo (resuelto evidentemente) SIN MODIFICAR EL NOMBRE DEL ARCHIVO.
Todos los ejercicios son obligatorios sin excepciones. La fecha de entrega es para el próximo 
jueves 12 de Julio antes de las 11:59:59 hrs.
*/


/*
*** EJERCICIO 1 ***
A éste se le llama el ejercicio de la ola (imitando a la ola de un estadio).
Lo que se debe hacer es convertir letra por letra a mayúsculas (y dejando en minúscula las demás)
Para provocar el efecto de la "ola", por ejemplo
ejercicio1("mundo") = List("Mundo","mUndo","muNdo","munDo","mundO")
Entonces en este caso es justamente lo que se debe retornar, una lista con esas combinaciones.
Casos especiales:
ejercicio("") = List()
ejercicio(" ") = List()
ejercicio("muNdo") = List("Mundo","mUndo","munDo","mundO") //Es decir, si hay ya alguna letra con la "ola"
                                                           //no se considera.
ejercicio("MuNdo") = List("ERROR") //si la palabra tiene más de dos letras en mayúsculas, se considera ina-
                                   //propiada para la ola.

def Ola(cadena:String):List[String] = {
var contador:Int=0
var Salida:List[String]=List()
var Cadena:String = cadena.replace(" ","")
var Mayuscula:String = cadena.toLowerCase

for (x <- 0 to Cadena.length-1){
if(Cadena(x).isUpper){
contador +=1
if(contador==2)
return List("No se hace la ola")
}
else{
Salida= Salida :+ (Mayuscula.substring(0,x)+Mayuscula(x).toUpper+Mayuscula.substring(x+1,Mayuscula.length))
}}
return Salida
}


*** EJERCICIO 2 ***
Este ejercicio se trata de, dada un array de CUALQUIER elemento como ésta:
Array(false,1,0,1,2,0,1,3,"a")
Se deben mover todos los 0 (se asume que sólo hay 0 de tipo entero) a la izquierda. 
En el ejemplo anterior se regresa:
Array(0,0,false,1,1,2,1,3,"a")
Consideraciones: 
Si el array de ingreso es vacía, se regresa la misma lista vacía.

def Ceros(lista:Array[Any]): Array[Any] =
{
   var ListaCero = lista.filter(_ == 0)
   var ListaValor = lista.filter(_ != 0)
   
   return ListaCero ++ ListaValor
}

*** EJERCICIO 3 *** 
Implemente la función para calcular el enésimo término de Fibonacci 
SIN USAR NINGÚN TIPO DE RECURSIVIDAD.
Puede usar cualquier ciclo o iterador que desee y tantos como le funcionen.
Ejemplo:
ejercicio3(4) = [0,1,1,2] = 2
ejercicio3(7) = [0,1,1,2,3,5,8] = 8
Consideraciones:
Si termino es 0, el resultado es 0
Si termino es 1, el resultado es 1
Si termino es negativo, el resultado debe dar -1

def Fibonacci(entrada:Int):Int = {
val pisa:Array[Int] = Array(0,0,1)
if(entrada<0)
return -1
else if(entrada ==1)
return pisa(entrada)
else{
for( i <- 0 to entrada-1){
pisa(0) = pisa(1)
pisa(1)=pisa(2)
pisa(2)=pisa(0)+pisa(1)}
return pisa(0)}}

/*
*** EJERCICIO 4 ***
Implemente un método para verificar el auxo y adecuada colocación de paréntesis, ejemplo
ejercicio4("") = true
ejercicio4("()") = true
ejercicio4("(()())") = true
ejercicio4("(()") = false
ejercicio4("))((") = false
Es decir, el ejercicio debe verificar no sólo que exista el mismo número de paréntesis
que cierran y abren sino que deben estar colocados en la forma que se ocupan tradicionalmente.
*/
def Parentesis(parentesis:String):Boolean = {

var aux:Int = 0

if (parentesis.isEmpty){
return false
} else
if (parentesis==" "){
return false
} else
for (x <- parentesis){
if(x==')')
aux-=1
else if (x=='(')
aux+=1
if(aux < 0)
return false
}
if(aux == 0)
return true
else
return false
}

/*
*** EJERCICIO 7 ***
Implemente la Criba de Eratóstenes en Scala (sí, primero investigue de qué va).
Ejemplos:
ejercicio7(1) = List(2)
ejercicio7(2) = List(2,3)
ejercicio7(4) = List(2,3,5,7)
Consideraciones: 
El número 1 NO es primo.
Asuma que el limite (n) siempre es positivo y mayor que 0.
*/
def criba(entrada:Int): List[Int] = {
var x:Int = 0
var primos:List[Int] = List()
var aux:List[Int] = List.range(2,entrada*10)

while(primos.length<entrada){
x =aux(0)
primos = primos:+ x
aux = aux.filter(_%x != 0)}
return primos
}

/*
*** EJERCICIO 8 ***
A este ejercicio se le llama "Identificar el Pangrama".
Un pangrama es una oración (desechando signos de puntuación y espacios) donde se encuentra
al menos una vez cada letra del alfabeto.
Ejemplos:
ejercicio8("El veloz murcielago hindu comia feliz cardillo y kiwi. 
La ciguena tocaba el saxofon detras del palenque de paja") = true
ejercicio8("abcdefghijklmnopqrstuvwxy") = false 
ejercicio8("") = false
Consideraciones:
Asuma que se emplea el alfabeto en inglés (i.e. no hay ñ ni letras acentuadas).
No haga distinción entre mayúsculas y minúsculas, es decir, trátelas por igual.
No utilice ni la estructura Map ni la estructura Set en la resolución. 
De nueva cuenta, este es de los pocos ejercicios en los que se verificará el código.
*/

def Pangrama(sCadena: String): Boolean ={
var letras: Set[String] = Set("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z")
var compara:Set[String] = (sCadena.toLowerCase.replace(",","").replace(" ","").split("").map(_.trim).toList.sorted).distinct.toSet
if (letras.diff(compara).size != 0){
return false}
return true
}
